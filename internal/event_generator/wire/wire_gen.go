// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"fmt"
	"github.com/UnicoYal/EventForge/internal/event_generator/config"
	"github.com/panjf2000/ants/v2"
	"github.com/stretchr/testify/assert/yaml"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"os"
)

// Injectors from wire.go:

func InitializeBox(configPath string) (*Box, func(), error) {
	config, err := provideConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	clientConn, cleanup, err := provideIngestionConn(config)
	if err != nil {
		return nil, nil, err
	}
	pool, cleanup2, err := provideWorkerPool(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	box := newBox(config, clientConn, pool)
	return box, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newBox(
	conf *config.Config,
	ingestionClient interface{},
	wp *ants.Pool,
) *Box {
	return &Box{
		Config:        *conf,
		IngestionClient: ingestionClient,
		WorkerPool:    wp,
	}
}

func provideConfig(configPath string) (*config.Config, error) {
	cfg := &config.Config{}

	data, err := os.ReadFile(configPath)
	if err != nil {
		return nil, fmt.Errorf("cannot read config file: %w", err)
	}

	if err = yaml.Unmarshal(data, cfg); err != nil {
		return nil, fmt.Errorf("cannot unmarshall config: %w", err)
	}

	return cfg, nil
}

func provideIngestionConn(config2 *config.Config) (*grpc.ClientConn, func(), error) {
	conn, err := grpc.NewClient(config2.
		IngestionEndpoint, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithDefaultServiceConfig(fmt.Sprintf(`{"loadBalancingPolicy": "%s"}`, config2.LoadBalancePolicy)),
	)

	if err != nil {
		return nil, nil, fmt.Errorf("cannot establish conn with ingestion service: %w", err)
	}

	cleanup := func() {
		conn.Close()
	}

	return conn, cleanup, nil
}

func provideWorkerPool(config2 *config.Config) (*ants.Pool, func(), error) {
	pool, err := ants.NewPool(config2.
		WorkerPool.Size, ants.WithMaxBlockingTasks(0), ants.WithNonblocking(true),
	)
	if err != nil {
		return nil, nil, fmt.Errorf("cannot initialize worker pool: %w", err)
	}

	cleanup := func() {
		pool.ReleaseTimeout(config2.WorkerPool.ReleaseTimeout)
	}

	return pool, cleanup, nil
}
